#!/bin/bash
#    bl-graphics-pipemenu - un pipemenu Openbox pour applications Graphiques
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#    Copyright (C) 2015-2016 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2015-2016 John Crawley    <john@bunsenlabs.org>
#    Traduis par Luvalem
#
#    Ce programme est un logiciel libre: vous pouvez le redistribuer
#    et / ou le modifier selon les termes de la Licence Publique 
#    Générale GNU publiée par la Free Software Foundation,
#    soit la version 3 de la licence, soit (à votre choix)
#    toute version ultérieure.
#
#    Ce programme est distribué dans l'espoir qu'il sera utile,
#    Mais SANS AUCUNE GARANTIE; Sans même la garantie implicite de
#    QUALITÉ MARCHANDE OU ADAPTATION À UN USAGE PARTICULIER.  Voir la
#    GNU General Public License pour plus de détails.
#
#   Vous devriez avoir reçu une copie de la Licence Publique 
#   Générale GNUavec ce programme.  Sinon, voir 
#   <http://www.gnu.org/licenses/>.

#   Pour changer les entrées du Graphics pipemenu:
#   editer ".config/openbox/pipemenus.rc"

HELP='    bl-graphics-pipemenu un pipemenu openbox pour applications graphiques
    Il devrait normalement être appelé à partir du menu openbox.

Options (Généralement passé du menu):
    -h --help   Afficher ce message
    --install   Installer un package graphique
    (Le paquet doit être dans la liste définie dans le fichier de configuration pipemenu)

    Si bl-graphics-pipemenu est appelé sans options (La méthode habituelle),
    il sortira un fichier openbox pipemenu xml
    pour le lancement et l installation d applications graphiques.

Voir ~/.config/openbox/pipemenus.rc pour les options de configuration.
'
# Cherchez une option d'aide quelque part
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    esac
done

BL_COMMON_LIBDIR='/usr/lib/bunsen/common'
USR_CFG_DIR="$HOME/.config/openbox"

# Get $USER images directory
if type xdg-user-dir &>/dev/null; then
    IMGDIR=$(xdg-user-dir PICTURES)
else
    IMGDIR="~/Images"
fi
# test pour le dossier Captures ecrans, le creer si pas existant
SCROTSDIR="$IMGDIR/captures"
mkdir -p "$SCROTSDIR"

if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo $"Erreur: Échec de la source bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
elif ! . "$USR_CFG_DIR/pipemenus.rc" 2> /dev/null; then
    echo $"Erreur: Echec de la source pipemenus.rc in $USR_CFG_DIR" >&2
    exit 1
fi

declare -A AppName AppStatus # AppName: fractionnée sur des traits d'union, première lettre en majuscules
for curApp in "${GRAPHICS_APPS[@]}" "${GRAPHICS_SCROTS[@]}"; do
    words=(${curApp//-/ })
    AppName[$curApp]="${words[*]^}"
    type "$curApp" >/dev/null 2>&1 && AppStatus[$curApp]=installed
done

appExists() {
    for curApp in "${GRAPHICS_APPS[@]}"; do # si $packageName existe dans le Tableau GRAPHICS_APPS
        [[ $curApp = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. Il n existe pas de telle application que je connaisse." 1 >&2
    say "Vous pouvez essayer une de celles ci: ${GRAPHICS_APPS[*]}" 2 >&2
    return 1
}

screenshooterExists() {
    for curScrot in "${GRAPHICS_SCROTS[@]}"; do # si $packageName existe dans le Tableau GRAPHICS_SCROTS
        [[ $curScrot = "$1" ]] &&
            return 0
    done
    say "Impossible d installer $1. Il n existe pas de telle application que je connaisse." 1 >&2
    say "Vous pouvez essayer une de celles ci: ${GRAPHICS_SCROTS[*]}" 2 >&2
    return 1
}

writeScrot() {                  # Write scrot submenu items
    IMG="$SCROTSDIR/%F-%H-%M-%S_scrot.png"
    VIEW="'bl-image-viewer $IMG'"
    menuSubmenu 'scrot' 'Capture Ecran Scrot'
        menuItem "scrot Maintenant" "scrot $IMG -e $VIEW"
        menuItem "scrot dans 5 secs..." "scrot -d 5 $IMG -e $VIEW"
        menuItem "scrot dans 10 secs..." "scrot -d 10 $IMG -e $VIEW"
        menuItem "scrot Selection" "scrot -s $IMG -e $VIEW"
        menuItem "scrot Current Focus" "scrot -u $IMG -e $VIEW"
        menuItem "scrot Multi-Monitor" "scrot -m $IMG -e $VIEW"
    menuSubmenuEnd
}

# Si le package nécessite une configuration supplémentaire avant l'installation
# Créer une fonction appelée setupappName, elle sera appelée automatiquement.

if [[ $1 = --install ]]; then
    packageName=$2
    appName=${AppName[$packageName]}
    if [[ $packageName = scrot || $packageName = xfce4-screenshooter ]];then
        screenshooterExists "$packageName" || exit 1
    else
        appExists "$packageName" || exit 1
    fi

    terminalCheck -T "Install $appName" "$@"

    desc="Ce script vas installer $appName."
    setupFunctionName="setup${appName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupBlender'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
            promptInstall --setup "$setupFunctionName" "$appName" "$desc" "$packageName"
    else
        if [[ $packageName = gimp ]];then
            if ! prompt 'Ceci vas installer GIMP. voulez vous aussi installer Gimp Extras?' N;then
                promptInstall "$appName" "$desc" "$packageName"
            else
                appName="Gimp and Gimp Extras"
                packageNameSet=(gimp gimp-plugin-registry gimp-gmic)
                desc="Ce script vas installer gimp, gimp-plugin-registry and gimp-gmic"
                promptInstall "$appName" "$desc" "${packageNameSet[@]}"
            fi
        else
            promptInstall "$appName" "$desc" "$packageName"
        fi
    fi

elif [[ $1 ]]; then
    echo "$0: pas d option $*" >&2
    exit 1

else # pipemenu
    menuStart
    for curApp in "${GRAPHICS_APPS[@]}"; do
        if [[ ${AppStatus[$curApp]} = installed ]]; then
            menuItem "${AppName[$curApp]}" "$curApp"
        fi
    done
    menu_started=false
    for curApp in "${GRAPHICS_APPS[@]}"; do
        if ! [[ ${AppStatus[$curApp]} = installed ]]; then
            $menu_started || menuSubmenu "graph-apps-install-submenu" "Install"
            menu_started=true
            menuItem "Install ${AppName[$curApp]}" "$0 --install $curApp"
        fi
    done
    $menu_started && menuSubmenuEnd

    menuSeparator 'Capture Ecran'

    for curScrot in "${GRAPHICS_SCROTS[@]}"; do
        if [[ ${AppStatus[$curScrot]} = installed ]]; then
            if [[ "$curScrot" = scrot ]];then
                writeScrot
            else
                menuItem "${AppName[$curScrot]}" "$curScrot"
            fi
        fi
    done
    menu_started=false
    for curScrot in "${GRAPHICS_SCROTS[@]}"; do
        if ! [[ ${AppStatus[$curScrot]} = installed ]]; then
            $menu_started || menuSubmenu "graph-scrots-install-submenu" "Install"
            menu_started=true
            menuItem "Install ${AppName[$curScrot]}" "$0 --install $curScrot"
        fi
    done
    $menu_started && menuSubmenuEnd
    menuEnd
fi
exit 0
