#    bl-include.cfg - Variables et fonctions Couramment utilisés dans les scripts 
#    personnalisés par Bunsen Labs Linux.
#    Copyright (C) 2012 Philip Newborough <corenominal@corenominal.org>
#    Copyright (C) 2013 Aleks-Daniel Jakimenko
#    Copyright (C) 2015-2016  John Crawley <john@bunsenlabs.org>
#    Copyright (C) 2016  xaos52 <xaos52@gmail.com>
#    Traduis par Luvalem
#
#    Ce programme est un logiciel libre: vous pouvez le redistribuer
#    et / ou le modifier selon les termes de la Licence Publique 
#    Générale GNU publiée par la Free Software Foundation,
#    soit la version 3 de la licence, soit (à votre choix)
#    toute version ultérieure.
#
#    Ce programme est distribué dans l'espoir qu'il sera utile,
#    Mais SANS AUCUNE GARANTIE; Sans même la garantie implicite de
#    QUALITÉ MARCHANDE OU ADAPTATION À UN USAGE PARTICULIER.  Voir la
#    GNU General Public License pour plus de détails.
#
#   Vous devriez avoir reçu une copie de la Licence Publique 
#   Générale GNUavec ce programme.  Sinon, voir 
#   <http://www.gnu.org/licenses/>.
#
# Ces fonctions peuvent être utilisées dans les scripts utilisateur,
# En cherchant d'abord ce fichier, par exemple:
# BL_COMMON_LIBDIR='/usr/lib/bunsen/common'
# if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
#     echo $"Error: Failed to locate bl-include.cfg in $BL_COMMON_LIBDIR" >&2
#     exit 1
# fi

# NOTE: Ne pas générer ce fichier dans des scripts shell non-Bash.
# Il utilise des «bashisms»..

########################################################################
# Fonctions permettant de générer des menus Openbox.

menuStart() {
    echo '    <openbox_pipe_menu>'
}

# Utilisation: menuItem label command
menuItem() {
    echo "        <item label=\"$(OBlabelEscape "$(XMLescape "$1")")\">"
    echo '            <action name="Execute">'
    echo '                <command>'
    echo "                    $(XMLescape "$2")"
    echo '                </command>'
    echo '            </action>'
    echo '        </item>'
}

# Utilisation: menuSeparator [label]
menuSeparator() {
    if [[ ${1-} ]]; then
        echo "        <separator label=\"$(OBlabelEscape "$(XMLescape "$1")")\"/>"
    else
        echo '        <separator/>'
    fi
}

# Utilisation menuSubmenu id label # http://openbox.org/wiki/Help:Menus
menuSubmenu() {
    echo "    <menu id=\"$(XMLescape "$1")\" label=\"$(OBlabelEscape "$(XMLescape "$2")")\">"
}

menuSubmenuEnd() {
    echo '    </menu>'
}

menuEnd() {
    echo '    </openbox_pipe_menu>'
}

# Échapper à des caractères spéciaux
XMLescape() {
    local string="${1//&/&amp;}"
    string="${string//</&lt;}"
    string="${string//>/&gt;}"
    string="${string//\"/&quot;}"
    string="${string//\'/&apos;}"
    printf '%s' "$string"
}
OBlabelEscape() {
    printf '%s' "${1//_/__}"
}

########################################################################

# Rerun script dans le terminal si nécessaire
# Utilisation: terminalCheck [ -T title ] [arguments...]
terminalCheck() {
    if ! [[ -t 0 && -t 1 && -t 2 ]]; then # not attached to terminal
        if [[ -n $DISPLAY ]]; then # running X
            if [[ ${1-} = '-T' ]];then
                local title=${2-}
                shift 2
                exec x-terminal-emulator -T "$title" -e "$0" "$@"
            else
                exec x-terminal-emulator -e "$0" "$@"
            fi
        else
            echo "$0: no terminal" >&2
            exit 1
        fi
    fi
}

# Utilisation: createFlag nomfichier
createFlag() {
    mkdir -p "$HOME/.config/bunsen"
    touch "$HOME/.config/bunsen/$1"
}

# Vérifiez la connexion en téléchargeant un fichier depuis ftp.debian.org. Pas d'espace disque utilisé.
# Utilisation: connectiontest [attempts]
# Si le nombre de tentatives n'est pas spécifié ou 0, alors il boucle et sort(!) Votre programme principal avec 1 État de sortie.
connectiontest() {
    local TEXT_CHECKING='Test de la connexion internet...'
    local TEXT_FAILED='Test de la connexion internet rate!'
    local TEXT_ASK_RETRY=$'\n\nce script necessite une connexion internet active. Svp configurez votre connexion internet, ensuite appuyez sur "Enter" pour continuer, sinon appuyez sur "q" pour quitter.'
    local TEXT_ABORT='Script annulé.'
    local TEXT_OK='Test de connexion internet OK!'

    local -i i attempts=${1-0}
    for (( i=0; i < attempts || attempts == 0; i++ )); do
        say "$TEXT_CHECKING"
        if wget -O - 'http://ftp.debian.org/debian/README' &> /dev/null; then
            say "$TEXT_OK" 1
            return 0
        fi
        say "$TEXT_FAILED"
        if (( i == attempts - 1 )); then # if last attempt
            return 1
        elif prompt "$TEXT_ASK_RETRY" Q; then # if user wants to quit
            say "$TEXT_ABORT" 2
            (( attempts == 0 )) && exit 1 || return 1
        fi
        tput clear
    done
}

# Vérifier la disponibilité des commandes utilisées dans le script.
# Utilisation: declareDependencies command [command...]
declareDependencies(){
    local missing_commands=() i=
    for i in "$@"
    do
        hash "$i" 2>/dev/null || missing_commands+=(" $i")
    done
    [[ ${missing_commands[0]} ]] && errorExit "Ce script necessite les commandes suivantes: ${missing_commands[*]}
Svp installez les packages contenant les commandes manquantes
et relancez le script."
}

########################################################################
# Fonctions de l'interface utilisateur.
# Utilisation: Dire le texte [delayAfterText|pause]
say() {
    local width=$(tput cols 2>/dev/tty)
    fold -s -w $((width - 3)) <<< "${1-}" | sed 's/^/  /' # wraps text nicely and adds two leading spaces
    if [[ ${2-} = 'pause' ]]
    then
        echo $'\nAppuyez sur une touche pour continuer.'
        read -srn1
    else
        sleep "${2:-0}"
    fi
}

# Utilisation errorExit message [details]
errorExit() {
    say $'\n'"$1"$'\n' '1' >&2
    [[ ${2-} ]] && {
        while true
        do
            local REPLY
            read -rn1 -p '  Appuyez sur "d" pour les details (q pour quitter) '
            [[ ${REPLY^} = Q ]] && exit 1
            [[ ${REPLY^} = D ]] && {
                echo $'\n\n'
                tput setaf 1
                echo "$2" >&2
                tput sgr0
                say "
Voulez vous quitter maintenant, ou Continuer de toute facon?
(Soyez prudent!)
Press \"q\" to quit, \"c\" to continue:
"
                read -r
                [[ ${REPLY^} = Q ]] && exit 1
                [[ ${REPLY^} = C ]] && return 0
            }
        done
    }
    say 'appuyez sur une touche pour sortir.'
    read -srn1
    exit 1
}

# Utilisation: prompt text [ Y | N | Q | <string> ]
prompt() {
    local answer prompt default
    if [[ ${2-} && ${2^} = Q ]]; then
        while true; do
            read -srn1 -p "$1" answer
            echo
            [[ ${answer^} = Q ]] && return 0
            [[ ! $answer ]] && return 1
        done
    fi

    if [[ ! ${2-} || ${2^} = Y ]]; then
        prompt='Y/n'
        default='Y'
    elif [[ ${2^} = N ]]; then
        prompt='y/N'
        default='N'
    else
        prompt=
        default=
    fi

    while true; do
        read -r -p "$1 ${prompt:+[$prompt] }" answer

        if [[ ! $prompt && ! $default ]]; then
            if [[ $answer = ${2-} ]]; then
                echo
                return 0
            elif [[ ${answer^} = Q ]]; then
                echo
                return 1
            else
                continue
            fi
        fi

        [[ ! $answer ]] &&
            answer=$default

        if [[ ${answer^} = Y || ${answer^^} = YES ]]; then
            echo
            return 0
        elif [[ ${answer^} = N || ${answer^^} = NO ]]; then
            echo
            return 1
        fi
    done
}

# Utilisation: promptInstall [--apt-get-option] name description package [package...]
# Use: promptInstall [--apt-get-option] --setup functionname name desc...
# to have functionname run first
promptInstall() {
    local arg=
    if [[ $1 = -* && $1 != --setup ]]; then
        arg=$1
        shift
    fi

    local setupFunction=
    if [[ $1 = '--setup' ]]; then
        if [[ -n ${2-} && $(type -t "$2") = 'function'  ]]; then
            setupFunction="$2"
            shift 2
        else
            say "Erreur: ${2-} n est pas une fonction."
            return 1
        fi
    fi

    tput clear
    local title="INSTALL ${1^^}"
    say "
$title
${title//?/-}

$2
"

    prompt '  Executer maintenant le programme d installation?' || return 0

    tput clear
    connectiontest || return 1

    if [[ -n $setupFunction ]]; then
        "$setupFunction" || return 1 # run setup function if it exists
    fi

    tput clear
    say 'Mise a jour des sources...' 1
    safeUpdate || say 'Poursuivre malgré les problèmes de mise à jour...' 3

    tput clear
    say 'Installation du package...' 1
    safeInstall $arg "${@:3}" || return 1

    tput clear
    say "
$1 A ete installe avec succes.

Appuyez sur une touche pour sortir..."
    read -srn1
    return 0
}

########################################################################

# Fonctions de gestion des paquets.

# Renvoie la valeur et l'url de repo d'origine si le paquetage est installé.
# retourne 1 si le paquet n est pas installe
# Utilisation: checkOrigin package
checkOrigin() {
    apt-cache policy $1 | sed -nr '/\*\*\*/ {n;s/^[ \t]*([0-9]+[ \t]+[^ \t]+).*$/\1/p;q0};${q1}'
}

# Version des sorties du paquet installé
# retourne 1 si package n est pas installe
# Utilisation: checkVersion package
checkVersion() {
    # dpkg is simpler but apt-cache + sed is faster
    #dpkg-query --show --showformat='${Version}' $1 2>/dev/null
    apt-cache policy $1 | sed -nr '/\*\*\*/ {s/^[ \t]*\*\*\*[ \t]+([0-9a-z:.+~-]+)[ \t]+.*$/\1/p;q0};${q1}'
    }

# Renvoie succès si tous les paquets sont installés
# Utilisation: allInstalled package [package...]
allInstalled() {
    local pkg=
    for pkg in "$@"
    do
        #[[ $(dpkg-query --show --showformat='${db:Status-Abbrev;2}' "$pkg" 2>/dev/null) = ii ]] || return 1
        checkVersion "$pkg" >/dev/null || return 1
    done
    return 0
}

# Apt-get functions.

# apt-get update, exit if error message.
# safeUpdate --ignore 'string' to ignore certain error message
safeUpdate() {
    local ignore_string=
    [[ ${1-} = '--ignore' ]] && {
        ignore_string="${2-}"
    }
    local apt_error
    if apt_error=$(LC_MESSAGES=C sudo apt-get update 2>&1 >/dev/tty) && {
            [[ -z "$apt_error" ]] || ! grep -iqEv "(${ignore_string:-$^}|^$)" <<<"$apt_error"
            }
    then
        say 'Mise a jour terminee' 1
        return 0
    else
        errorExit 'Il y a eu des problemes pendant la mise a jour.' "$apt_error"
        return 1
    fi
}

# apt-get upgrade, exit if error message.
# safeUpgrade [--dist-upgrade (for dist-upgrade)] [--apt-get-option]
safeUpgrade() {
    local cmd='upgrade'
    [[ ${1-} = '--dist-upgrade' ]] && {
        cmd='dist-upgrade'
        shift
    }
    local ignore_string1='Extracting templates from packages: 100%' # apt sends this to stderr!
    local ignore_string2='Retrieving bug reports... Done' # apt-listbugs sends this to stderr!
    local ignore_string3='Parsing Found/Fixed information... Done' # apt-listbugs sends this to stderr!
    local apt_error
    if apt_error=$(LC_MESSAGES=C sudo apt-get $cmd "${@}" 2>&1 >/dev/tty) && {
            [[ -z "$apt_error" ]] || ! grep -iqEv "(${ignore_string1:-$^}|${ignore_string2:-$^}|${ignore_string3:-$^}|^$)" <<<"$apt_error"
            }
    then
        say 'Mise a niveau terminee.' 1
        return 0
    else
        errorExit 'Il y a eu des problemes pendant la mise a niveau.' "${apt_error:-Upgrade Aborted}"
        return 1
    fi
}

# Utilisation safeInstall [--apt-get-option] package [package...]
safeInstall() {
    local ignore_string1='Extracting templates from packages: 100%' # apt sends this to stderr!
    local ignore_string2='Retrieving bug reports... Done' # apt-listbugs sends this to stderr!
    local ignore_string3='Parsing Found/Fixed information... Done' # apt-listbugs sends this to stderr!
    local apt_error
    if apt_error=$(LC_MESSAGES=C sudo apt-get install "${@}" 2>&1 >/dev/tty) && {
            [[ -z "$apt_error" ]] || ! grep -iqEv "(${ignore_string1:-$^}|${ignore_string2:-$^}|${ignore_string3:-$^}|^$)" <<<"$apt_error"
            }
    then
        say 'Installation terminee avec succes.' 1
        return 0
    else
        errorExit "Problemes durant l installation ${*}" "${apt_error:-Install Aborted}"
        return 1
    fi
}

# Utilisation safeRemove [--apt-get-option] package [package...]
safeRemove() {
    local ignore_string1='Extracting templates from packages: 100%' # apt sends this to stderr!
    local ignore_string2='Retrieving bug reports... Done' # apt-listbugs sends this to stderr!
    local ignore_string3='Parsing Found/Fixed information... Done' # apt-listbugs sends this to stderr!
    local apt_error
    if apt_error=$(LC_MESSAGES=C sudo apt-get remove "${@}" 2>&1 >/dev/tty) && {
            [[ -z "$apt_error" ]] || ! grep -iqEv "(${ignore_string1}|${ignore_string2}|${ignore_string3}|^$)" <<<"$apt_error"
            }
    then
        say "Supprime avec succes ${*}" 1
        return 0
    else
        errorExit "Il y a eu des problemes pour supprimer ${*}" "${apt_error:-Remove Aborted}"
        return 1
    fi
}
